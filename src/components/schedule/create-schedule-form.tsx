'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useToast } from '@/hooks/use-toast';
import { handleCreateSchedule } from '@/lib/actions';
import type { CreateScheduleOutput } from '@/ai/flows/create-schedule';
import { IconSpinner } from '@/components/icons';

const formSchema = z.object({
  scheduleDescription: z.string().min(10, {
    message: 'Please describe your desired schedule in at least 10 characters.',
  }),
});

export function CreateScheduleForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [scheduleOutput, setScheduleOutput] = useState<CreateScheduleOutput | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      scheduleDescription: '',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setScheduleOutput(null);
    try {
      const result = await handleCreateSchedule(values);
      setScheduleOutput(result);
      toast({
        title: 'Schedule Created!',
        description: 'Your new schedule has been generated by AI.',
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error Creating Schedule',
        description: error instanceof Error ? error.message : 'An unknown error occurred.',
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Card className="w-full max-w-2xl mx-auto shadow-xl">
      <CardHeader>
        <CardTitle className="text-2xl">AI Schedule Creator</CardTitle>
        <CardDescription>
          Describe your ideal schedule, and let Day Weaver AI craft it for you.
          Try something like: "Create a daily routine for a freelance writer working from home."
          or "Plan my study schedule for upcoming final exams in Math and Physics."
        </CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6">
            <FormField
              control={form.control}
              name="scheduleDescription"
              render={({ field }) => (
                <FormItem>
                  <FormLabel htmlFor="scheduleDescription" className="text-lg">Schedule Description</FormLabel>
                  <FormControl>
                    <Textarea
                      id="scheduleDescription"
                      placeholder="e.g., Make me a daily routine for JEE prep."
                      className="min-h-[120px] resize-none text-base"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button type="submit" disabled={isLoading} size="lg">
              {isLoading ? (
                <>
                  <IconSpinner className="mr-2 h-5 w-5" />
                  Generating...
                </>
              ) : (
                'Create Schedule'
              )}
            </Button>
          </CardFooter>
        </form>
      </Form>

      {scheduleOutput && (
        <Card className="mt-8 bg-accent/10">
          <CardHeader>
            <CardTitle>Your Generated Schedule</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="whitespace-pre-wrap rounded-md bg-background p-4 text-sm font-mono overflow-x-auto">
              {scheduleOutput.schedule}
            </pre>
          </CardContent>
        </Card>
      )}
    </Card>
  );
}
