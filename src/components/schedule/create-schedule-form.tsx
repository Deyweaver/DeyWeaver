
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useToast } from '@/hooks/use-toast';
import { handleCreateSchedule } from '@/lib/actions';
import type { CreateScheduleOutput } from '@/ai/flows/create-schedule';
import { IconSpinner } from '@/components/icons';
import type { Task } from '@/types';
import { getTasksFromLocalStorage, saveTasksToLocalStorage } from '@/lib/task-storage';
import { isValid, parseISO } from 'date-fns';

const formSchema = z.object({
  scheduleDescription: z.string().min(10, {
    message: 'Please describe your desired schedule in at least 10 characters.',
  }),
});

export function CreateScheduleForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [scheduleTextOutput, setScheduleTextOutput] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      scheduleDescription: '',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setScheduleTextOutput(null);
    try {
      const result: CreateScheduleOutput = await handleCreateSchedule(values);
      setScheduleTextOutput(result.scheduleText);
      toast({
        title: 'Schedule Created!',
        description: 'Your new schedule has been generated by AI.',
      });

      if (result.tasks && result.tasks.length > 0) {
        const existingTasks = getTasksFromLocalStorage();
        const newTasksFromAI: Task[] = result.tasks.map((aiTask, index) => {
          let dueDateISO: string | undefined = undefined;
          if (aiTask.dueDate) {
            try {
              const parsedDate = parseISO(aiTask.dueDate); // Handles YYYY-MM-DD
              if (isValid(parsedDate)) {
                dueDateISO = parsedDate.toISOString();
              } else {
                console.warn(`Invalid dueDate format from AI: ${aiTask.dueDate}`);
              }
            } catch (e) {
              console.warn(`Error parsing dueDate from AI: ${aiTask.dueDate}`, e);
            }
          }

          return {
            id: `ai-${Date.now()}-${index}`, // Simple unique ID
            name: aiTask.name,
            description: aiTask.description,
            category: aiTask.category,
            priority: aiTask.priority || 'medium',
            dueDate: dueDateISO,
            status: 'todo',
          };
        });
        
        // Avoid adding duplicate tasks by name (simple check)
        const tasksToSave = [...existingTasks];
        let addedCount = 0;
        newTasksFromAI.forEach(aiTask => {
          if (!existingTasks.some(existingTask => existingTask.name.toLowerCase() === aiTask.name.toLowerCase())) {
            tasksToSave.push(aiTask);
            addedCount++;
          }
        });

        if (addedCount > 0) {
          saveTasksToLocalStorage(tasksToSave);
          toast({
            title: 'Tasks Added!',
            description: `${addedCount} task(s) from the schedule have been added to your task list.`,
          });
        } else if (newTasksFromAI.length > 0) {
           toast({
            title: 'Tasks Identified',
            description: `AI identified ${newTasksFromAI.length} task(s), but they might already exist in your list.`,
          });
        }
      }

    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error Creating Schedule',
        description: error instanceof Error ? error.message : 'An unknown error occurred.',
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Card className="w-full max-w-2xl mx-auto shadow-xl">
      <CardHeader>
        <CardTitle className="text-2xl">AI Schedule Creator</CardTitle>
        <CardDescription>
          Describe your ideal schedule, and let Day Weaver AI craft it for you.
          Tasks identified by the AI (including priority and due date if applicable) will be automatically added to your "My Tasks" page.
          Try something like: "Create a daily routine for a freelance writer working from home, who needs to finish a draft by Friday."
          or "Plan my study schedule for upcoming final exams in Math (high priority) and Physics (medium priority) next week."
        </CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6">
            <FormField
              control={form.control}
              name="scheduleDescription"
              render={({ field }) => (
                <FormItem>
                  <FormLabel htmlFor="scheduleDescription" className="text-lg">Schedule Description</FormLabel>
                  <FormControl>
                    <Textarea
                      id="scheduleDescription"
                      placeholder="e.g., Make me a daily routine for JEE prep."
                      className="min-h-[120px] resize-none text-base"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button type="submit" disabled={isLoading} size="lg">
              {isLoading ? (
                <>
                  <IconSpinner className="mr-2 h-5 w-5" />
                  Generating...
                </>
              ) : (
                'Create Schedule'
              )}
            </Button>
          </CardFooter>
        </form>
      </Form>

      {scheduleTextOutput && (
        <Card className="mt-8 bg-accent/10">
          <CardHeader>
            <CardTitle>Your Generated Schedule</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="whitespace-pre-wrap rounded-md bg-background p-4 text-sm font-mono overflow-x-auto">
              {scheduleTextOutput}
            </pre>
          </CardContent>
        </Card>
      )}
    </Card>
  );
}

