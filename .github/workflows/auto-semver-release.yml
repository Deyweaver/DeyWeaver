name: Auto Semantic Release

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'  # Skip bot commits to avoid loops

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest version from README
        id: get_version
        run: |
          README_FILE="README.md"
          # Extract version from badge, e.g., version-v0.0.1
          if grep -q "version-v" $README_FILE; then
            CURRENT_VERSION=$(grep -o "version-v[0-9]*\.[0-9]*\.[0-9]*" $README_FILE | head -1 | cut -d'-' -f2)
          else
            CURRENT_VERSION="v0.0.0"
          fi
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version (patch)
        id: bump
        run: |
          TAG=${{ env.CURRENT_VERSION }}
          MAJOR=$(echo $TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $TAG | cut -d. -f2)
          PATCH=$(echo $TAG | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: "Automated semantic release from commit $GITHUB_SHA"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version badge in README
        run: |
          BADGE_URL="https://img.shields.io/badge/version-${{ env.NEW_VERSION }}-orange"
          README_FILE="README.md"
          if grep -q "version-${{ env.NEW_VERSION }}" $README_FILE; then
            echo "Badge is already up-to-date."
          else
            if grep -q "version-" $README_FILE; then
              sed -i "s|!\[version\].*|![version]($BADGE_URL)|" $README_FILE
            else
              sed -i "1i![version]($BADGE_URL)" $README_FILE
            fi
            git add $README_FILE
            git commit -m "Update version badge to ${{ env.NEW_VERSION }}"
            git push origin master
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
